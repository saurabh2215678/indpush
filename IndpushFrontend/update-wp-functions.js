const fs = require('fs');
const path = require('path');
const fse = require('fs-extra');

const buildPath = path.resolve(__dirname, 'build', 'static', 'js');
const buildcssPath = path.resolve(__dirname, 'build', 'static', 'css');

const mainJsFile = fs.readdirSync(buildPath).find(file => file.startsWith('main.'));
const mainCssFile = fs.readdirSync(buildcssPath).find(file => file.startsWith('main.'));

const builddPath = path.resolve(__dirname, 'build');
const imagesPath = path.resolve(builddPath, 'images');
const fontsPath = path.resolve(builddPath, 'fonts');
const targetPath = path.resolve(__dirname, '../');
const targetBuildPath = path.resolve(__dirname, '../wp-content/themes/indpush/');

if (!mainJsFile) {
  console.error('Main JavaScript file not found in the build directory.');
  process.exit(1);
}
if (!mainCssFile) {
  console.error('Main css file not found in the build directory.');
  process.exit(1);
}

const mainJsPath = path.join(buildPath, mainJsFile);

// Define the path to functions.php
const functionsPhpPath = path.resolve(__dirname, '../wp-content/themes/indpush', 'functions.php');

// Generate the content for functions.php
const functionsPhpBegin = '// === BEGIN REACT ENQUEUE SCRIPTS ===';
const functionsPhpEnd = '// === END REACT ENQUEUE SCRIPTS ===';

const existingFunctionsPhp = fs.readFileSync(functionsPhpPath, 'utf-8');
const startIndex = existingFunctionsPhp.indexOf(functionsPhpBegin);
const endIndex = existingFunctionsPhp.indexOf(functionsPhpEnd) + functionsPhpEnd.length;

if (startIndex === -1 || endIndex === -1) {
  console.error('Unable to find the specified comments in functions.php.');
  process.exit(1);
}

const beforeCode = existingFunctionsPhp.slice(0, startIndex) + functionsPhpBegin;
const afterCode = existingFunctionsPhp.slice(endIndex);

const updatedFunctionsPhp = `${beforeCode}
// Enqueue main.js generated by React build
wp_enqueue_script('your-react-app', get_template_directory_uri() . '/build/static/js/${mainJsFile}', array(), null, true);

// Enqueue main.css generated by React build
wp_enqueue_style('your-react-app-styles', get_template_directory_uri() . '/build/static/css/${mainCssFile}');
${functionsPhpEnd}${afterCode}`;

fs.writeFileSync(functionsPhpPath, updatedFunctionsPhp);

console.log(`React enqueue code in functions.php updated successfully with ${mainJsFile}.`);


if (!fs.existsSync(imagesPath)) {
    console.error('Images folder not found in the build directory.');
    process.exit(1);
  }
if (!fs.existsSync(fontsPath)) {
    console.error('Images folder not found in the build directory.');
    process.exit(1);
  }

// Define the path where you want to copy the 'images' folder
const targetImagesPath = path.resolve(targetPath, 'images');
const targetFontsPath = path.resolve(targetPath, 'fonts');
const targetProjectPath = path.resolve(targetBuildPath, 'build');

// Create the destination directory if it doesn't exist
if (!fs.existsSync(targetImagesPath)) {
  fs.mkdirSync(targetImagesPath);
}
if (!fs.existsSync(targetFontsPath)) {
  fs.mkdirSync(targetFontsPath);
}

// Copy the 'images' folder from build to the target path
fse.copySync(imagesPath, targetImagesPath);
fse.copySync(fontsPath, targetFontsPath);
fse.emptyDirSync(targetProjectPath);
fse.copySync(builddPath, targetProjectPath);

console.log('Images folder copied successfully.');